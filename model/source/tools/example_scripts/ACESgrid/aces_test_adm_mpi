#!/bin/bash
#
#PBS -q four-twelve
#PBS -N tst_adm
#PBS -l nodes=2:ppn=2
#PBS -e /home/jmc/test_aces/output/tst_adm.stderr
#PBS -o /home/jmc/test_aces/output/tst_adm.stdout

# $Header: /u/gcmpack/MITgcm/tools/example_scripts/ACESgrid/aces_test_adm_mpi,v 1.17 2012/05/01 13:20:39 jmc Exp $
# $Name:  $

# ACES-grid PBS-batch script for Adjoint MPI test using ifort (default=v8) & mpich

if test -f /etc/profile.d/modules.sh ; then
    . /etc/profile.d/modules.sh
fi
# Note: added "ulimit -s unlimited" in file "~/.bashrc"
# to pass big test (the 2 fizhi-cs-* test & adjoint tests) with MPI

dNam='aces'
TST_DIR="$HOME/test_$dNam"
echo "start from TST_DIR='$TST_DIR' at: "`date`

umask 0022
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"

HERE=$TST_DIR/output
sfx='adm'
 module add mpich/intel
 module add netcdf/3.6.1/icc
 export MPI_INC_DIR='/usr/local/pkg/mpich/mpich-intel/include'
 OPTFILE="../tools/build_options/linux_ia32_ifort"
#OPTFILE="$HERE/linux_ia32_ifort+mpi_aces"
 options="-adm -do -MPI 4 -mf $PBS_NODEFILE -devel"
 EXE="mpirun -machinefile TR_MFILE -v -np TR_NPROC ./mitgcmuv_ad"
#- need this to get "staf":
 export PATH="$PATH:$HOME/bin"

#- keep a copy of MPI_MFILE:
cp -p $PBS_NODEFILE $HERE"/mf_"$sfx

checkOut=1
#options="$options -nc" ; checkOut=0
#options="$options -q"  ; checkOut=0

gcmDIR="MITgcm_$sfx"
cd $TST_DIR
#- check for disk space:
#dsp=`df -P . | tail -1 | awk '{print $5}' | sed 's/%$//'`
#if [ $dsp -gt 99 ] ; then
dsp=`df -P . | tail -1 | awk '{print $4}'`
if [ $dsp -le 1000000 ] ; then
  echo 'Not enough space on this disk => do not run testreport.'
  df .
  exit
fi
if [ $checkOut -eq 1 ] ; then
  if test -d $gcmDIR/CVS ; then
#- remove previous output tar files and tar & remove previous output-dir
    /bin/rm -f $gcmDIR/verification/??_${dNam}-${sfx}_????????_?.tar.gz
    ( cd $gcmDIR/verification
      listD=`ls -1 -d ??_${dNam}-${sfx}_????????_?`
      for dd in $listD
      do
        if test -d $dd ; then
          tar -cf ${dd}".tar" $dd > /dev/null 2>&1 && gzip ${dd}".tar" && /bin/rm -rf $dd
          RETVAL=$?
          if test "x$RETVAL" != x0 ; then
             echo "ERROR in tar+gzip prev outp-dir: $dd"
             echo " on '"`hostname`"' (return val=$RETVAL) but continue"
          fi
        fi
      done )
#   ( cd $gcmDIR/verification ; ../tools/do_tst_2+2 -clean )
    echo "cvs update of dir $gcmDIR :"
    ( cd $gcmDIR ; cvs -q -d :pserver:cvsanon@mitgcm.org:/u/gcmpack update -P -d ) 2>&1
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
       echo "cvs update on '"`hostname`"' fail (return val=$RETVAL) => exit"
       exit
    fi
  else
    echo "no dir: $gcmDIR/CVS => try a fresh check-out"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $gcmDIR ; then
     rm -rf $gcmDIR
  fi
# cvs co MITgcm
  cvs -d :pserver:cvsanon@mitgcm.org:/u/gcmpack co -P -d $gcmDIR MITgcm > /dev/null 2>&1
  /usr/bin/find $gcmDIR -type d | xargs chmod g+rxs
  /usr/bin/find $gcmDIR -type f | xargs chmod g+r
fi

#- change dir to $gcmDIR/verification dir:
if test -e $gcmDIR/verification ; then
  if [ $checkOut -lt 2 ] ; then
    echo " dir $gcmDIR/verification exist" ; fi
  cd $gcmDIR/verification
else
  echo "no dir: $gcmDIR/verification => exit"
  exit
fi

echo ./testreport $options -of $OPTFILE -command \"$EXE\" -odir ${dNam}-$sfx
./testreport $options -of $OPTFILE -command "$EXE" -odir ${dNam}-$sfx

