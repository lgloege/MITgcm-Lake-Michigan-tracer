C $Header: /u/gcmpack/MITgcm/pkg/exch2/exch2_z_xy_rx.template,v 1.2 2005/07/24 01:35:06 jmc Exp $
C $Name:  $

#include "CPP_EEOPTIONS.h"
#include "W2_OPTIONS.h"

CBOP

C     !ROUTINE: EXCH_Z_XY_R4

C     !INTERFACE:
      SUBROUTINE EXCH2_Z_XY_R4(
     U                       phi,
     I                       myThid )
      IMPLICIT NONE
C     !DESCRIPTION:
C     *==========================================================*
C     | SUBROUTINE EXCH_Z_XY_R4
C     | o Handle exchanges for _R4 two-dim zeta-point array.
C     *==========================================================*
C     | Invoke appropriate exchange for a zeta-point array
C     | for either global grid, or cube sphere grid.
C     *==========================================================*

C     !USES:
C     === Global data ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "EESUPPORT.h"
#include "W2_EXCH2_TOPOLOGY.h"
#include "W2_EXCH2_PARAMS.h"

C     !INPUT/OUTPUT PARAMETERS:
C     === Routine arguments ===
C     phi    :: Array with overlap regions are to be exchanged
C     myThid :: My thread id.
      _R4 phi(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      INTEGER myThid

C     !LOCAL VARIABLES:
C     == Local variables ==
C     OL[wens]       :: Overlap extents in west, east, north, south.
C     exchWidth[XY]  :: Extent of regions that will be exchanged.
C     mFace          :: face number
C     phiNW,phiSE    :: temporary array to hold corner value (CS grid)
      INTEGER OLw, OLe, OLn, OLs, exchWidthX, exchWidthY, myNz
      INTEGER bi, bj, myTile, i, j
      INTEGER mFace
      _R4 phiNW(nSx,nSy)
      _R4 phiSE(nSx,nSy)
CEOP


      OLw        = OLx
      OLe        = OLx
      OLn        = OLy
      OLs        = OLy
      exchWidthX = OLx
      exchWidthY = OLy
      myNz       = 1
C     ** NOTE ** The exchange routine we use here does not 
C                require the preceeding and following barriers.
C                However, the slow, simple exchange interface 
C                that is calling it here is meant to ensure 
C                that threads are synchronised before exchanges
C                begine.

      IF (useCubedSphereExchange) THEN

C-     save 2 corners value (in case we find 1 "missing corner")
       DO bj=myByLo(myThid),myByHi(myThid)
        DO bi=myBxLo(myThid),myBxHi(myThid)
          phiNW(bi,bj) = phi(1,sNy+1,bi,bj)
          phiSE(bi,bj) = phi(sNx+1,1,bi,bj)
        ENDDO
       ENDDO

       CALL EXCH2_R41_CUBE( phi, 'T ',
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_UPDATE_CORNERS, myThid )
       CALL EXCH2_R41_CUBE( phi, 'T ',
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_UPDATE_CORNERS, myThid )

       DO bj=myByLo(myThid),myByHi(myThid)
        DO bi=myBxLo(myThid),myBxHi(myThid)
         myTile = W2_myTileList(bi)
         mFace  = exch2_myFace(myTile)

C---     Face 2,4,6:
         IF ( MOD(mFace,2).EQ.0 ) THEN

C--      East edge : shift j <- j-1
          IF ( exch2_isEedge(myTile) .EQ. 1 ) THEN
           DO j=sNy+OLy,2-Oly,-1
            DO i=sNx+1,sNx+OLx
              phi(i,j,bi,bj)=phi(i,j-1,bi,bj)
            ENDDO
           ENDDO
C-       North-East corner
           IF ( exch2_isNedge(myTile) .EQ. 1 ) THEN
            DO j=sNy+2,sNy+OLy
              i=sNx-sNy+j
              phi(sNx+1,j,bi,bj)=phi(i,sNy+1,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=sNy+2,sNy+OLy
             DO i=sNx+2,sNx+OLx
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
#endif
           ENDIF
          ENDIF
C--      South edge : shift i <- i-1
          IF ( exch2_isSedge(myTile) .EQ. 1 ) THEN
           DO j=1-OLy,0
            DO i=sNx+OLx,2-Olx,-1
              phi(i,j,bi,bj)=phi(i-1,j,bi,bj)
            ENDDO
           ENDDO
C-       South-East corner
           IF ( exch2_isEedge(myTile) .EQ. 1 ) THEN
            phi(sNx+1,1,bi,bj)=phiSE(bi,bj)
            DO i=sNx+2,sNx+OLx
              j=sNx+2-i
              phi(i,1,bi,bj)=phi(sNx+1,j,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=1-OLy,0
             DO i=sNx+2,sNx+OLx
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
#endif
           ENDIF
C-       South-West corner
           IF ( exch2_isWedge(myTile) .EQ. 1 ) THEN
            DO j=1-OLy,0
              phi(1,j,bi,bj)=phi(j,1,bi,bj)
#ifdef W2_FILL_NULL_REGIONS
             DO i=1-OLx,0
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
#endif
            ENDDO
           ENDIF
          ENDIF
C--      North-west corner
          IF ( exch2_isWedge(myTile) .EQ. 1 .AND.
     &         exch2_isNedge(myTile) .EQ. 1 ) THEN
            DO i=2-OLx,0
              j=sNy+2-i
              phi(i,sNy+1,bi,bj)=phi(1,j,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=sNy+2,sNy+OLy
             DO i=1-OLx,0
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
            phi(1-Olx,sNy+1,bi,bj)=e2FillValue_R4
#endif
          ENDIF

         ELSE
C---     Face 1,3,5:

C--      North edge : shift i <- i-1
          IF ( exch2_isNedge(myTile) .EQ. 1 ) THEN
           DO j=sNy+1,sNy+Oly
            DO i=sNx+OLx,2-Olx,-1
              phi(i,j,bi,bj)=phi(i-1,j,bi,bj)
            ENDDO
           ENDDO
C-       North-East corner
           IF ( exch2_isEedge(myTile) .EQ. 1 ) THEN
            DO i=sNx+2,sNx+OLx
              j=sNy-sNx+i
              phi(i,sNy+1,bi,bj)=phi(sNx+1,j,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=sNy+2,sNy+OLy
             DO i=sNx+2,sNx+OLx
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
#endif
           ENDIF
          ENDIF
C--      West edge : shift j <- j-1
          IF ( exch2_isWedge(myTile) .EQ. 1 ) THEN
           DO j=sNy+OLy,2-Oly,-1
            DO i=1-Olx,0
              phi(i,j,bi,bj)=phi(i,j-1,bi,bj)
            ENDDO
           ENDDO
C-       North-west corner
           IF ( exch2_isNedge(myTile) .EQ. 1 ) THEN
            phi(1,sNy+1,bi,bj)=phiNW(bi,bj)
            DO j=sNy+2,sNy+OLy
              i=sNy+2-j
              phi(1,j,bi,bj)=phi(i,sNy+1,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=sNy+2,sNy+OLy
             DO i=1-OLx,0
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
#endif
           ENDIF
C-       South-West corner
           IF ( exch2_isSedge(myTile) .EQ. 1 ) THEN
            DO i=1-OLx,0
              phi(i,1,bi,bj)=phi(1,i,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=1-OLy,0
             DO i=1-OLx,0
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
#endif
           ENDIF
          ENDIF
C-       South-East corner
          IF ( exch2_isEedge(myTile) .EQ. 1 .AND.
     &         exch2_isSedge(myTile) .EQ. 1 ) THEN
            DO j=2-OLy,0
              i=sNx+2-j
              phi(sNx+1,j,bi,bj)=phi(i,1,bi,bj)
            ENDDO
#ifdef W2_FILL_NULL_REGIONS
            DO j=1-OLy,0
             DO i=sNx+2,sNx+OLx
              phi(i,j,bi,bj)=e2FillValue_R4
             ENDDO
            ENDDO
            phi(sNx+1,1-Oly,bi,bj)=e2FillValue_R4
#endif
          ENDIF

C---     end odd / even face number
         ENDIF

        ENDDO
       ENDDO

      ELSE

       CALL EXCH_R4( phi,
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_UPDATE_CORNERS, myThid )

      ENDIF

      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

CEH3 ;;; Local Variables: ***
CEH3 ;;; mode:fortran ***
CEH3 ;;; End: ***
