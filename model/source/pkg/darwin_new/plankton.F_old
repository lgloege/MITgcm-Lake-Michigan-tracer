#include "CPP_OPTIONS.h"
#include "PTRACERS_OPTIONS.h"
#include "GCHEM_OPTIONS.h"

#ifdef ALLOW_PTRACERS
#ifdef ALLOW_DARWIN

c ====================================================================
c SUBROUTINE PLANKTON
c 1. Local ecological interactions for models with many phytoplankton
c    "functional groups" 
c 2. Timestep plankton and nutrients locally 
c 3. Includes explicit DOM and POM
c 4. Remineralization of detritus also determined in routine
c 5. NOT in this routine: sinking of particles and iron chemistry
c
c Mick Follows, Scott Grant, Fall/Winter 2005
c modified Stephanie Dutkiewicz Spring 2006
c ====================================================================
         SUBROUTINE PLANKTON(phyto, zooP, zooN, zooFe, zooSi, PP, 
     &                       PO4local, NO3local, FeTlocal, Silocal,
     &                       NO2local, NH4local, 
     &                       DOPlocal, DONlocal, DOFelocal,
     &                       POPlocal, PONlocal, POFelocal, PSilocal,
     &                       PARlocal,Tlocal, Slocal,
     &                       deltatbio, thickness,
     &                       hfacclocal,bottom,
     &                       MyThid)
         implicit none
         include "PLANKTON.h"

C !INPUT PARAMETERS: ===================================================
C  myThid               :: thread number
      INTEGER myThid
CEOP
c === GLOBAL VARIABLES =====================
c npmax = no of phyto functional groups
c nzmax = no of grazer species
c phyto = phytoplankton
c zoo   = zooplankton
         _RL phyto(npmax)
         _RL zooP(nzmax)
         _RL zooN(nzmax)
         _RL zooFe(nzmax)
         _RL zooSi(nzmax)
         _RL PP(npmax)
         _RL PO4local
         _RL NO3local
         _RL FeTlocal
         _RL Silocal
         _RL NO2local
         _RL NH4local
         _RL DOPlocal
         _RL DONlocal
         _RL DOFelocal
         _RL POPlocal 
         _RL PONlocal
         _RL POFelocal
         _RL PSilocal
         _RL POPuplocal
         _RL PONuplocal
         _RL POFeuplocal
         _RL PSiuplocal 
         _RL PARlocal
         _RL Tlocal
         _RL Slocal
         _RL deltatbio
         _RL thickness
         _RL hfacclocal
         _RL bottom



c LOCAL VARIABLES....................................
c time-derivatives for phyto
         _RL dphytodt(npmax)
c time-derivatives for zooplankton specific to each nutrient pool 
         _RL dzooPdt(nzmax)
         _RL dzooNdt(nzmax)
         _RL dzooFedt(nzmax)
         _RL dzooSidt(nzmax)
         _RL dPO4dt
         _RL dNO3dt
         _RL dNO2dt
         _RL dNH4dt
         _RL dFeTdt
         _RL dSidt
         _RL dDOPdt
         _RL dDONdt
         _RL dDOFedt
         _RL dPOPdt
         _RL dPONdt
         _RL dPOFedt
         _RL dPSidt

c phytoplankton specific nutrient limitation term
         _RL limit(npmax)
c np = phytoplankton index
         integer np
c nz = zooplankton index 
         integer nz

c WORKING VARIABLES
         _RL grazing
         _RL grazingP
         _RL grazingN
         _RL grazingFe
         _RL grazingSi
         _RL dummy
         _RL Ndummy
         _RL Nsourcelimit(npmax)
         _RL consump
         _RL consumpPO4
         _RL consumpNO3
         _RL consumpNO2
         _RL consumpNH4
         _RL consumpFeT
         _RL consumpSi
         _RL reminPO4
         _RL reminNO3
         _RL reminFeT
         _RL reminSi
         _RL PspecificPO4(npmax)
         _RL phytoTempFunction(npmax)
         _RL zooTempFunction(nzmax)
         _RL sinking
         _RL DOPform
         _RL DONform
         _RL DOFeform
         _RL DOPremin
         _RL DONremin
         _RL DOFeremin
         _RL preminP
         _RL preminN
         _RL preminFe
         _RL preminSi

         _RL kgrazesat

         _RL NO2prod
         _RL NO3prod
  
         _RL facpz

         integer ITEST
c.................................................................



c remineralization of sinking particulate
            preminP  = Kpremin_P*POPlocal 
            preminN  = Kpremin_N*PONlocal 
            preminFe = Kpremin_Fe*POFelocal 
            preminSi = Kpremin_Si*PSilocal 

c tendency of particulate detritus pools
            dpopdt  = - preminP 
            dpondt  = - preminN 
            dpofedt = - preminFe
            dpSidt  = - preminSi 

c ZooPlankton Temp Dep. Function changed by Scott
            do nz = 1,nzmax  
C TEMPORARY COMMENTS cccccccccccccccccccccccccccccc
c              zooTempFunction(nz) = zooTempCoeff(nz)*EXP(
c    &             zooTempExp(nz)*(Tlocal - zooTempOptimum(nz)))
C TEMPORARYcccccccccccccccccccccccccccccccccccccccc
              zooTempFunction(nz) = 1.0d0
Cccccccccccccccccccccccccccccccccccccccccccccccccccccc
            end do   


c determine phytoplankton tendencies
            do 200 np = 1, npmax

c growth terms
               limit(np) = 1.0d0
c light limitation
               dummy = PARlocal/(PARlocal+ksatPAR(np))
               if(dummy .lt. limit(np))limit(np) = dummy
c photo inhibition
c              dummy = 1.0d0 - (PARlocal/(PARlocal+kinhib(np)))
c MICK TEST - shut down growth for k > kinhib
               if(PARlocal .gt. kinhib(np))dummy = 0.05
               if(dummy .lt. limit(np))limit(np) = dummy
c              write(6,*)'bottom, np, light limit',bottom,np,limit(np)
c nutrient limitation
               dummy = PO4local/(PO4local+ksatPO4(np))
               if(dummy .lt. limit(np))limit(np) = dummy
c              write(6,*)'bottom, np, PO4 limit',bottom,np,limit(np)

c NITROGEN LIMITATION

c  New Way of Nitrogen Limitation


c Determine Which Nsource is Limiting for Consumption
c Will only consume least limiting
               if(diazotroph(np) .ne. 1.0)then
                   Ndummy = NH4local/(NH4local+ksatNH4(np))
                   Nsourcelimit(np) = 3 
                   if(nsource(np) .eq. 1)then
                      dummy = NO3local/(NO3local+ksatNO3(np))
                      if(dummy .gt. Ndummy)then
                         Nsourcelimit(np) = 1
                      endif   
                   elseif(nsource(np) .eq. 2)then
                      dummy = NO2local/(NO2local+ksatNO2(np))
                      if(dummy .gt. Ndummy)then
                         Nsourcelimit(np) = 2
                      endif   
                   endif
               endif
c. Now check for limiting tendency
               if(diazotroph(np) .ne. 1.0)then
                 if(Nsourcelimit(np) .eq. 3)then 
                  dummy = NH4local/(NH4local+ksatNH4(np))
                   if(dummy .lt. limit(np))limit(np) = dummy
                 elseif(Nsourcelimit(np) .eq. 1)then
                   dummy = NO3local/(NO3local+ksatNO3(np))
                   if(dummy .lt. limit(np))limit(np) = dummy
                 elseif(Nsourcelimit(np) .eq. 2)then
                   dummy = NO2local/(NO2local+ksatNO2(np))
                   if(dummy .lt. limit(np))limit(np) = dummy
                 endif
               endif

c ..Old Way of doing Nitrogen limitation
c               if(diazotroph(np) .ne. 1.0)then
c if cannot fix own nitrogen limited by its prefered source
c                 if(nsource(np) .eq. 1)then
c                   dummy = NO3local/(NO3local+ksatNO3(np))
c                   if(dummy .lt. limit(np))limit(np) = dummy
c                 elseif(nsource(np) .eq. 2)then
c                   dummy = NO2local/(NO2local+ksatNO2(np))
c                   if(dummy .lt. limit(np))limit(np) = dummy
c                 elseif(nsource(np) .eq. 3)then
c                   dummy = NH4local/(NH4local+ksatNH4(np))
c                   if(dummy .lt. limit(np))limit(np) = dummy
c                 endif
c               endif
c              write(6,*)'bottom, np, NO3 limit',bottom,np,limit(np)


c IRON and SILICA
               dummy = FeTlocal/(FeTlocal+ksatFeT(np))
               if(dummy .lt. limit(np))limit(np) = dummy
c              write(6,*)'bottom, np, Fe limit',bottom,np,limit(np)
               if(R_SiP(np) .ne. 0.0)then
                 dummy = Silocal/(Silocal+ksatSi(np))
                 if(dummy .lt. limit(np))limit(np) = dummy
               end if
c              write(6,*)'bottom, np, Si limit',bottom,np,limit(np)

c Phyto Grazing Half Sat Constant
c Lowered to TEST
c                kgrazesat = 0.1d-2
              kgrazesat = 0.1d0

c grazing: sum contributions of all zooplankton
               grazing = 0.0d0
               do nz = 1, nzmax
                   grazing = grazing + graze(np,nz)*zooP(nz)*
     &                 zooTempFunction(nz)
               end do

c sinking                                       
               sinking = wsink(np)/thickness

c New Temperature Dep. changed by Scott
c phyto tendency = growth - grazing - sinking

c Temperature Dependent Growth function for Phyto

               phytoTempFunction(np) = phytoTempCoeff(np)*
     &    EXP(phytoTempExp1(np)*(Tlocal - phytoTempOptimum(np))
     &    - phytoTempExp2(np)*
     &    (abs(Tlocal - phytoTempOptimum(np)))**phytoDecayPower(np))
    
c no temp limitation
c             phytoTempFunction(np) = 1.0d0

               PspecificPO4(np) = mu(np)*phyto(np)*limit(np)*
     &   phytoTempFunction(np) 
c        write(6,*)'np =',np, ' PspecificPO4 ='
c     &              ,PspecificPO4(np)
           
               dphytodt(np) =   PspecificPO4(np)
     &                        - grazing*
     &              (phyto(np)/(phyto(np) + kgrazesat)) 
     &                        - sinking*phyto(np)

c accumulate particulate detritus
               dpopdt  = dpopdt  + sinking*phyto(np)
               dpondt  = dpondt  + sinking*phyto(np)*R_NP(np)
               dpofedt = dpofedt + sinking*phyto(np)*R_FeP(np)
               dpsidt  = dpsidt  + sinking*phyto(np)*R_SiP(np)
 200        end do 

c determine zooplankton tendencies
            do 300 nz = 1, nzmax
c grazing: sum contribution from all phytoplankton
              grazingP = 0.0d0
              grazingN = 0.0d0
              grazingFe = 0.0d0
              grazingSi = 0.0d0
              do np = 1, npmax
               facpz = (phyto(np)/(phyto(np) + kgrazesat))
     &                  *zooTempFunction(nz)
               grazingP = grazingP + graze(np,nz)*facpz
               grazingN = grazingN + graze(np,nz)*R_NP(np)*facpz
               grazingFe = grazingFe + graze(np,nz)*R_FeP(np)*facpz
               grazingSi = grazingSi + graze(np,nz)*R_SiP(np)*facpz
              end do




c zoo in P currency
              dzooPdt(nz) = grazingP*zooP(nz) - mortzoo(nz)*zooP(nz) 
c zooplankton in other currencies 
C zooplankton stoichiometry varies according to food source 
              dzooNdt(nz) = grazingN*zooP(nz) - mortzoo(nz)*zooN(nz) 
              dzooFedt(nz) = grazingFe*zooP(nz) - mortzoo(nz)*zooFe(nz)
              dzooSidt(nz) = grazingSi*zooP(nz) - mortzoo(nz)*zooSi(nz) 
 300        end do

c determine nutrient tendencies
c consumption - sum of phytoplankton contributions
            consumpPO4 = 0.0d0
            consumpNO3 = 0.0d0
            consumpNO2 = 0.0d0
            consumpNH4 = 0.0d0
            consumpFeT = 0.0d0
            consumpSi  = 0.0d0
            do np = 1, npmax
               consumpPO4 = consumpPO4 + PspecificPO4(np)
c New Way of doing Nitrogen Consumption .......................
               if(diazotroph(np) .ne. 1.0)then
                 if(Nsourcelimit(np) .eq. 1)then
                    consumpNO3 = consumpNO3 + PspecificPO4(np)*R_NP(np)
                 elseif(Nsourcelimit(np) .eq. 2)then
                   consumpNO2 = consumpNO2 + PspecificPO4(np)*R_NP(np)
                 elseif(Nsourcelimit(np) .eq. 3)then
                    consumpNH4 = consumpNH4 + PspecificPO4(np)*R_NP(np)
                 end if
               end if
                  
c Old Way for Nitrogen
c if diazotroph then does not consume dissolved inorganic nitrogen
c               if(diazotroph(np) .ne. 1.0)then 
c                 if(nsource(np) .eq. 1)then
c                    consumpNO3 = consumpNO3 + PspecificPO4(np)*R_NP(np)
c                 elseif(nsource(np) .eq. 2)then
c                   consumpNO2 = consumpNO2 + PspecificPO4(np)*R_NP(np)
c                 elseif(nsource(np) .eq. 3)then
c                    consumpNH4 = consumpNH4 + PspecificPO4(np)*R_NP(np)
c                 end if
c               end if

               consumpFeT = consumpFeT + PspecificPO4(np)*R_FeP(np)
               consumpSi  = consumpSi  + PspecificPO4(np)*R_SiP(np)
            end do
c remineralization and export of dead zooplankton
c determine contribution of each nutrient from each zooplankton group
            do nz = 1, nzmax
c put "exported" fraction into explicit particulate detritus pool
              dpopdt = dpopdt
     &            + mortzoo(nz)*zooP(nz)*ExportFracZ(nz)
              dpondt = dpondt
     &            + mortzoo(nz)*zooN(nz)*ExportFracZ(nz)
              dpofedt = dpofedt
     &            + mortzoo(nz)*zooFe(nz)*ExportFracZ(nz)
              dpsidt = dpsidt
     &            + mortzoo(nz)*zooSi(nz)
            end do

c fixed DOM remineralization rates
            DOPremin =  Kdop * DOPlocal
            DONremin =  Kdon * DONlocal
            DOFeremin =  KdoFe * DOFelocal

c NH4 -> NO2 -> NO3 by bacterial action
            NO2prod =  knita*NH4local 
            NO3prod =  knitb*NO2local 

c    write(6,*) 'Export Frac', ExportFracZ(1), ExportFracZ(2)
c sum contributions to inorganic nutrient tendencies
            dPO4dt =  - consumpPO4 +  preminP  + DOPremin
c notice all particle and DON remin direct to NH4 
c NH4 -> NO2 -> NO3
            dNH4dt =  - consumpNH4 +  preminN  - NO2prod  + DONremin
            dNO2dt =  - consumpNO2 +  NO2prod  - NO3prod
            dNO3dt =  - consumpNO3             + NO3prod
c-ONLYNO3   dNO3dt =  - consumpNO3 +  preminN  + DONremin
            dFeTdt =  - consumpFeT +  preminFe + DOFeremin 
            dSidt  =  - consumpSi  +  preminSi

c now dissolved organic nutrient tendencies
c formed from mortality/excretion of zooplankton
            DOPform  = 0.0d0
            DONform  = 0.0d0
            DOFeform = 0.0d0
            do nz = 1,nzmax
              DOPform  =  DOPform + 
     &                    mortzoo(nz)*zooP(nz)*(1.0d0-ExportFracZ(nz))
              DONform  =  DONform + 
     &                    mortzoo(nz)*zooN(nz)*(1.0d0-ExportFracZ(nz))
              DOFeform =  DOFeform + 
     &                    mortzoo(nz)*zooFe(nz)*(1.0d0-ExportFracZ(nz))
            end do

c determine remin rates
            dDOPdt  = DOPform - DOPremin 
            dDONdt  = DONform - DONremin 
            dDOFedt = DOFeform - DOFeremin 

c forward timestep...
c phyto
            do np = 1,npmax
              phyto(np) = phyto(np) + deltatbio*dphytodt(np)
              PP(np) = PspecificPO4(np)
            end do
c zoo
            do nz = 1,nzmax
              zooP(nz) = zooP(nz) + deltatbio*dzooPdt(nz)
              zooN(nz) = zooN(nz) + deltatbio*dzooNdt(nz)
              zooFe(nz) = zooFe(nz) + deltatbio*dzooFedt(nz)
              zooSi(nz) = zooSi(nz) + deltatbio*dzooSidt(nz)
            end do
c dissolved inorganic nutrients
            PO4local = PO4local + deltatbio*dPO4dt
            NO3local = NO3local + deltatbio*dNO3dt
            NO2local = NO2local + deltatbio*dNO2dt
            NH4local = NH4local + deltatbio*dNH4dt
            FeTlocal = FeTlocal + deltatbio*dFeTdt
            Silocal  = Silocal  + deltatbio*dSidt
c dissolved organic nutrients
            DOPlocal = DOPlocal + deltatbio*dDOPdt
            DONlocal = DONlocal + deltatbio*dDONdt
            DOFelocal = DOFelocal + deltatbio*dDOFedt
c particulate/detrital nutrients
            POPlocal = POPlocal + deltatbio*dpopdt
            PONlocal = PONlocal + deltatbio*dpondt
            POFelocal = POFelocal + deltatbio*dpofedt
            PSilocal = PSilocal + deltatbio*dpsidt


         RETURN
         END
#endif  /*DARWIN*/
#endif  /*ALLOW_PTRACERS*/
c ==================================================================
